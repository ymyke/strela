window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "strela", "modulename": "strela", "type": "module", "doc": "<h1 id=\"strela-a-python-package-for-financial-alerts\">strela - a python package for financial alerts \ud83d\udcc8\ud83d\udea8\ud83d\udcc9</h1>\n\n<p>strela provides a toolbox to generate and send different kinds of alerts based on\nfinancial information.</p>\n\n<p>The package is intended to be used to write a Python script that can be scheduled via\ncronjob or similar facilities and runs everything necessary according to your needs. See\n<code>strela.my_runner</code> as an example.</p>\n\n<h2 id=\"features-overview\">Features &amp; overview</h2>\n\n<ul>\n<li><code>strela.alert_generator</code>: The central logic that brings all the building blocks\ntogether to retrieve and analyze the financial metrics and to generate and send alerts\nif applicable.</li>\n<li><code>strela.alertstates.alertstate.AlertState</code>: The abstract base class for all alert\nstates. Alert states encapsulate the logic to determine whether an alert has triggered\nor not. There are two concrete types of alerts:\n<ul>\n<li><code>strela.alertstates.fluctulertstate.FluctulertState</code>: Alerts for fluctuations (up\nor down) over certain thresholds.</li>\n<li><code>strela.alertstates.doubledownalertstate.DoubleDownAlertState</code>: Alerts for\nsignificant downward movement which could trigger an over-proportional buy.</li>\n</ul></li>\n<li><code>strela.templates</code>: Classes to turn alerts into text or html strings that can be\nprinted or mailed.</li>\n<li><code>strela.mailer</code>: To send alerts via email.</li>\n<li><code>strela.config</code>: Configuration management. Use the override mechanism described there\nto put your own user config file in place that overrides the settings in the default\nconfig file according to your environment.</li>\n<li><code>strela.my_runner</code>: The script that brings it all together and runs the alert\ngenerator according to your requirements. Use this script as a blueprint to build your\nown runner script.</li>\n<li><code>strela.alertstates.alertstaterepository</code>: Repositories (in memory or on disk) to\nstore and retrieve alert states.</li>\n</ul>\n\n<h2 id=\"how-to-install-and-use\">How to install and use</h2>\n\n<ol>\n<li>Install the package. Two options:\n<ul>\n<li><code>pip install strela</code></li>\n<li>Clone the repository and install the requirements using poetry.</li>\n</ul></li>\n<li>Set up your config file <code>my_config.py</code> based on the documentation in <code>strela.config</code>.\n(Review your config via <code>strela.config.print_current_configuation</code>.)</li>\n<li>Write your own runner script based on the blueprint in <code>strela.my_runner</code>. (Test your\nscript by running it and -- if necessary -- setting <code>strela.config.ENABLE_ALL_DOWS</code>\nand/or <code>strela.config.NO_MAIL</code> to <code>True</code>.)</li>\n<li>Install your runner script as a daily cronjob or similar.</li>\n</ol>\n\n<h2 id=\"example-alerts\">Example alerts</h2>\n\n<p>What a single Fluctulert looks like in the alert e-mail:</p>\n\n<p><img src=\"https://raw.githubusercontent.com/ymyke/strela/master/docs/images/fluctulert_example.png?token=GHSAT0AAAAAABVYSCNRSV2FKNFBTPDE4NIGYX7OHDQ\" alt=\"Fluctulert example\" /></p>\n\n<p>What a single DoubleDownAlert looks like in the alert e-mail:</p>\n\n<p><img src=\"https://raw.githubusercontent.com/ymyke/strela/master/docs/images/doubledownalert_example.png?token=GHSAT0AAAAAABVYSCNRBTY3C7IQ2KI4SDKCYX7OHAQ\" alt=\"DoubleDownAlert example\" /></p>\n\n<h2 id=\"limitations\">Limitations</h2>\n\n<p>The overall software architecture features decent modularization and separation of\nconcerns, but also has a lot of room left for improvement. E.g., better separation of\nconcerns in AlertStates (mixing logic and output currently), better parametrization of\nalert states and templates, better extensibility, etc. </p>\n\n<h2 id=\"strela-vs-tessa\">strela vs tessa</h2>\n\n<p>The strela package works seamlessly with <a href=\"https://github.com/ymyke/tessa\">tessa</a> and its\nSymbol class and financial information access functionality.</p>\n\n<p>At the same time, care was taken to make strela open and flexible enough to be used with\nother packages and/or your own code.</p>\n\n<p>Still, many or most people will end up using strela together with tessa so it's worth\ndiscussing whether strela should be incorporated into tessa.</p>\n\n<p>I decided to keep strela separate from tessa because strela has a distinctly different\ncharacter: a) it is not purely a library but needs some script to be built on top and\nthen called as a CLI tool / cronjob, b) it tends to rely on external files such as a\nlist of symbols to be loaded, c) it needs a place to store the alert state (and will\nfail if that place doesn't exist, which seems to be unacceptable behavior for a pure\nlibrary such as tessa).</p>\n\n<p>But I would like to have your thoughts on this. Should strela and tessa be separate\npackages or better both in one? <a href=\"https://github.com/ymyke/strela/issues/1\">Add your thoughts to the respective\nissue.</a></p>\n\n<h2 id=\"a-note-on-tests\">A note on tests</h2>\n\n<p>Some of the tests hit the net and are marked as such with <code>pytest.mark.net</code>. That way,\nyou can easily run exclude those tests if you like: <code>pytest -m \"not net\"</code>.</p>\n"}, {"fullname": "strela.alert_generator", "modulename": "strela.alert_generator", "type": "module", "doc": "<p>Central function to analyze symbols and create alerts.</p>\n"}, {"fullname": "strela.alert_generator.generate_alerts", "modulename": "strela.alert_generator", "qualname": "generate_alerts", "type": "function", "doc": "<p>Check list of symbols and return a list of alert strings. Returns empty list if\nno alerts are found.</p>\n\n<ul>\n<li><code>alertstate_class</code>: The <code>strela.alertstates.AlertState</code> subclass to be used to\ntrack state and determine whether an alert has been triggered.</li>\n<li><code>get_metrichistory_callback</code>: Callback that returns historic data for the given\nsymbol and the metric under observation as a dataframe. The dataframe must have\ntimestamps as the index and exactly one column with the metric.</li>\n<li><code>symbols</code>: The list of symbols to be analyzed.</li>\n<li><code>template</code>: The template to use to generate the alert text.</li>\n<li><code>repo</code>: The repository to use to retrieve and store the state of alerts.</li>\n</ul>\n\n<p>Note that this function is kept very generic so you can plug in your own building\nblocks.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">alertstate_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">metric_history_callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">symboltype</span><span class=\"o\">.</span><span class=\"n\">SymbolType</span><span class=\"p\">],</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">symbols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">symboltype</span><span class=\"o\">.</span><span class=\"n\">SymbolType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">templates</span><span class=\"o\">.</span><span class=\"n\">AlertToTextTemplate</span>,</span><span class=\"param\">\t<span class=\"n\">repo</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstaterepository</span><span class=\"o\">.</span><span class=\"n\">BaseAlertStateRepository</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates", "modulename": "strela.alertstates", "type": "module", "doc": "<p>Contains the <code>AlertState</code> and the <code>AlertStateRepository</code> class hierarchies.</p>\n"}, {"fullname": "strela.alertstates.alertstate", "modulename": "strela.alertstates.alertstate", "type": "module", "doc": "<p>AlertState ABC</p>\n"}, {"fullname": "strela.alertstates.alertstate.AlertState", "modulename": "strela.alertstates.alertstate", "qualname": "AlertState", "type": "class", "doc": "<p>The abstract base class for all alert states. Alert states encapsulate the logic\nto determine whether an alert has triggered or not.</p>\n", "bases": "abc.ABC"}, {"fullname": "strela.alertstates.alertstate.AlertState.__init__", "modulename": "strela.alertstates.alertstate", "qualname": "AlertState.__init__", "type": "function", "doc": "<p>Constructor. Takes a history dataframe <code>hist</code>. The dataframe must have\ntimestamps as the index and exactly one column with the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hist</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span>)</span>"}, {"fullname": "strela.alertstates.alertstate.AlertState.textify", "modulename": "strela.alertstates.alertstate", "qualname": "AlertState.textify", "type": "function", "doc": "<p>Return state as a text. Highlight differences to <code>other</code> if not None. Returns\nan empty string if nothing happened that would trigger an alert.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstate.AlertState.htmlify", "modulename": "strela.alertstates.alertstate", "qualname": "AlertState.htmlify", "type": "function", "doc": "<p>Return state as html. Returns empty string if there are no alerts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstate.AlertState.eq", "modulename": "strela.alertstates.alertstate", "qualname": "AlertState.eq", "type": "function", "doc": "<p>Check for equality of this alert and <code>other</code>. Note that <code>other</code> can be None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstate.AlertState.is_ringing", "modulename": "strela.alertstates.alertstate", "qualname": "AlertState.is_ringing", "type": "function", "doc": "<p>Return <code>True</code> if this alert has been triggered (meaning in the last\nperiod) and not cooled down yet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstaterepository", "modulename": "strela.alertstates.alertstaterepository", "type": "module", "doc": "<p>AlertState repository classes</p>\n"}, {"fullname": "strela.alertstates.alertstaterepository.BaseAlertStateRepository", "modulename": "strela.alertstates.alertstaterepository", "qualname": "BaseAlertStateRepository", "type": "class", "doc": "<p>Simple repository that resides just in memory. It's also the base class for other\nrepository classes. (<em>Note: Should add a proper ABC base class here eventually.\n(FIXME)</em>)</p>\n"}, {"fullname": "strela.alertstates.alertstaterepository.BaseAlertStateRepository.__init__", "modulename": "strela.alertstates.alertstaterepository", "qualname": "BaseAlertStateRepository.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_</span></span>)</span>"}, {"fullname": "strela.alertstates.alertstaterepository.BaseAlertStateRepository.lookup_state", "modulename": "strela.alertstates.alertstaterepository", "qualname": "BaseAlertStateRepository.lookup_state", "type": "function", "doc": "<p>Look up symbol's state. Return None if nothing is found.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">symbol_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstaterepository.BaseAlertStateRepository.update_state", "modulename": "strela.alertstates.alertstaterepository", "qualname": "BaseAlertStateRepository.update_state", "type": "function", "doc": "<p>Update symbol's state.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">symbol_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstaterepository.BaseAlertStateRepository.backup", "modulename": "strela.alertstates.alertstaterepository", "qualname": "BaseAlertStateRepository.backup", "type": "function", "doc": "<p>Backup repo. No-op for this type of repo.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstaterepository.AlertStateRepository", "modulename": "strela.alertstates.alertstaterepository", "qualname": "AlertStateRepository", "type": "class", "doc": "<p>Simple repository for <code>AlertState</code>s based on shelve package.</p>\n", "bases": "BaseAlertStateRepository"}, {"fullname": "strela.alertstates.alertstaterepository.AlertStateRepository.__init__", "modulename": "strela.alertstates.alertstaterepository", "qualname": "AlertStateRepository.__init__", "type": "function", "doc": "<p>Create a new repository. <code>filename</code> is the name of the shelf file to be\nused.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "strela.alertstates.alertstaterepository.AlertStateRepository.lookup_state", "modulename": "strela.alertstates.alertstaterepository", "qualname": "AlertStateRepository.lookup_state", "type": "function", "doc": "<p>Look up symbol's state. Return None if nothing is found.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">symbol_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstaterepository.AlertStateRepository.update_state", "modulename": "strela.alertstates.alertstaterepository", "qualname": "AlertStateRepository.update_state", "type": "function", "doc": "<p>Update symbol's state.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">symbol_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.alertstaterepository.AlertStateRepository.backup", "modulename": "strela.alertstates.alertstaterepository", "qualname": "AlertStateRepository.backup", "type": "function", "doc": "<p>Move a copy of the shelf files to the backup folder.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.doubledownalertstate", "modulename": "strela.alertstates.doubledownalertstate", "type": "module", "doc": "<p>Double-down alert state.</p>\n"}, {"fullname": "strela.alertstates.doubledownalertstate.Level", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "Level", "type": "class", "doc": "<p>A Level is simply a combination of trigger and factor, e.g., (0.2, 4), which\nwould mean: if the metric declines by &gt;= 20%, suggest a 4x invest. Level is a\nnamedtuple subclass that overrides &gt; operator to make things easier below.</p>\n", "bases": "Level"}, {"fullname": "strela.alertstates.doubledownalertstate.Level.__init__", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "Level.__init__", "type": "function", "doc": "<p>Create new instance of Level(trigger, factor)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trigger</span>, </span><span class=\"param\"><span class=\"n\">factor</span></span>)</span>"}, {"fullname": "strela.alertstates.doubledownalertstate.Level.trigger", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "Level.trigger", "type": "variable", "doc": "<p>Alias for field number 0</p>\n"}, {"fullname": "strela.alertstates.doubledownalertstate.Level.factor", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "Level.factor", "type": "variable", "doc": "<p>Alias for field number 1</p>\n"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState", "type": "class", "doc": "<p>Concrete class for double-down alert states, which trigger for significant\ndownward movements and suggest over-proportional buys.</p>\n\n<p>Note that -- due to the way this function is implemented -- days is not the same as\ndates. Days is more like trading days because there is usually no weekend data in\nthe dataframes that are fed into the initiator.</p>\n", "bases": "strela.alertstates.alertstate.AlertState"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.__init__", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.__init__", "type": "function", "doc": "<p>Constructor. Takes a history dataframe <code>hist</code>. The dataframe must have\ntimestamps as the index and exactly one column with the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hist</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span>)</span>"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.levels", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.levels", "type": "variable", "doc": "<p>The different levels at which alerts are triggered including the double-down\nfactors for each level.</p>\n", "annotation": ": ClassVar[List[strela.alertstates.doubledownalertstate.Level]]", "default_value": " = [Level(trigger=0.1, factor=2), Level(trigger=0.2, factor=4), Level(trigger=0.3, factor=6), Level(trigger=0.4, factor=8), Level(trigger=0.5, factor=10)]"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.averagingperiod", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.averagingperiod", "type": "variable", "doc": "<p>Number of days to average over when determining if an alert triggers.</p>\n", "annotation": ": ClassVar[int]", "default_value": " = 30"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.cooldownperiod", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.cooldownperiod", "type": "variable", "doc": "<p>After this number of days the alert resets to 0 if no new alert level has been\nreached.</p>\n", "annotation": ": ClassVar[int]", "default_value": " = 30"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.currentlevel", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.currentlevel", "type": "variable", "doc": "<p>The current alert level that is active. (Which does not necessarily mean that\nit has been activated just now. Check alertactivated for that.) None, if no level is\nactive.</p>\n", "annotation": ": Optional[strela.alertstates.doubledownalertstate.Level]"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.alertactivated", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.alertactivated", "type": "variable", "doc": "<p>Records whether a new alert level has been reached by the latest history\nentry.</p>\n", "annotation": ": bool"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.alerthistory", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.alerthistory", "type": "variable", "doc": "<p>History of all the alerts that have been triggered.</p>\n", "annotation": ": list"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.is_ringing", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.is_ringing", "type": "function", "doc": "<p>Return <code>True</code> if this alert has been triggered (meaning in the last\nperiod) and not cooled down yet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.textify", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.textify", "type": "function", "doc": "<p>Return state as a text. Highlight differences to <code>other</code> if not None. Returns\nan empty string if nothing happened that would trigger an alert.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">doubledownalertstate</span><span class=\"o\">.</span><span class=\"n\">DoubleDownAlertState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.htmlify", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.htmlify", "type": "function", "doc": "<p>Return state as html. Returns empty string if there are no alerts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">doubledownalertstate</span><span class=\"o\">.</span><span class=\"n\">DoubleDownAlertState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.doubledownalertstate.DoubleDownAlertState.eq", "modulename": "strela.alertstates.doubledownalertstate", "qualname": "DoubleDownAlertState.eq", "type": "function", "doc": "<p>Check for equality of this alert and <code>other</code>. Note that <code>other</code> can be None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">doubledownalertstate</span><span class=\"o\">.</span><span class=\"n\">DoubleDownAlertState</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.fluctulertstate", "modulename": "strela.alertstates.fluctulertstate", "type": "module", "doc": "<p>Fluctulert state.</p>\n"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat", "type": "class", "doc": "<p>Helper class to calculate the stats for a given period in the history.</p>\n"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.__init__", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">dtrigger</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">hist</span><span class=\"p\">:</span> <span class=\"n\">dataclasses</span><span class=\"o\">.</span><span class=\"n\">InitVar</span><span class=\"p\">[</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.period", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.period", "type": "variable", "doc": "<p>The period length in days.</p>\n", "annotation": ": int"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.dtrigger", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.dtrigger", "type": "variable", "doc": "<p>Required dmin / dmax to trigger an alert.</p>\n", "annotation": ": float"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.hist", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.hist", "type": "variable", "doc": "<p>Dataframe with daily values for the metric.</p>\n", "annotation": ": dataclasses.InitVar[DataFrame]"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.dmin", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.dmin", "type": "variable", "doc": "<p>Difference in % between lastvalue and min value in period. Derived attribute.</p>\n", "annotation": ": float"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.dmax", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.dmax", "type": "variable", "doc": "<p>Difference in % between lastvalue and max value in period. Derived attribute.</p>\n", "annotation": ": float"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.maxtriggers", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.maxtriggers", "type": "function", "doc": "<p>Whether it triggers on max.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.mintriggers", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.mintriggers", "type": "function", "doc": "<p>Whether it triggers on min.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.fluctulertstate.PeriodStat.eq", "modulename": "strela.alertstates.fluctulertstate", "qualname": "PeriodStat.eq", "type": "function", "doc": "<p>Check for equality of this PeriodStat and <code>other</code>. Equality simply means that\nboth objects trigger the same way.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">fluctulertstate</span><span class=\"o\">.</span><span class=\"n\">PeriodStat</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.fluctulertstate.FluctulertState", "modulename": "strela.alertstates.fluctulertstate", "qualname": "FluctulertState", "type": "class", "doc": "<p>Concrete class for fluctulert states.</p>\n", "bases": "strela.alertstates.alertstate.AlertState"}, {"fullname": "strela.alertstates.fluctulertstate.FluctulertState.__init__", "modulename": "strela.alertstates.fluctulertstate", "qualname": "FluctulertState.__init__", "type": "function", "doc": "<p>Constructor. Takes a history dataframe <code>hist</code>. The dataframe must have\ntimestamps as the index and exactly one column with the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hist</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span>)</span>"}, {"fullname": "strela.alertstates.fluctulertstate.FluctulertState.period_trigger_config", "modulename": "strela.alertstates.fluctulertstate", "qualname": "FluctulertState.period_trigger_config", "type": "variable", "doc": "<p>The different levels at which to trigger. E.g., (14, 0.1) means: If there is a\n10% change in 14 days, trigger an alert.</p>\n", "annotation": ": ClassVar[list]", "default_value": " = [(3, 0.05), (6, 0.07), (14, 0.1), (30, 0.15), (60, 0.2), (90, 0.25), (180, 0.3), (360, 0.35)]"}, {"fullname": "strela.alertstates.fluctulertstate.FluctulertState.stats", "modulename": "strela.alertstates.fluctulertstate", "qualname": "FluctulertState.stats", "type": "variable", "doc": "<p>A collection of <code>PeriodStat</code> objects.</p>\n", "annotation": ": list"}, {"fullname": "strela.alertstates.fluctulertstate.FluctulertState.textify", "modulename": "strela.alertstates.fluctulertstate", "qualname": "FluctulertState.textify", "type": "function", "doc": "<p>Return all stats as a text. Returns an empty string if there are no stats,\ni.e., if nothing happened that would trigger a trigger.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">fluctulertstate</span><span class=\"o\">.</span><span class=\"n\">FluctulertState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.fluctulertstate.FluctulertState.htmlify", "modulename": "strela.alertstates.fluctulertstate", "qualname": "FluctulertState.htmlify", "type": "function", "doc": "<p>Return stats as html. Returns empty string if there are no alerts.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">fluctulertstate</span><span class=\"o\">.</span><span class=\"n\">FluctulertState</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.fluctulertstate.FluctulertState.is_ringing", "modulename": "strela.alertstates.fluctulertstate", "qualname": "FluctulertState.is_ringing", "type": "function", "doc": "<p>Return <code>True</code> if this alert has been triggered (meaning in the last\nperiod) and not cooled down yet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.alertstates.fluctulertstate.FluctulertState.eq", "modulename": "strela.alertstates.fluctulertstate", "qualname": "FluctulertState.eq", "type": "function", "doc": "<p>Check for equality of this PeriodStat and <code>other</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">fluctulertstate</span><span class=\"o\">.</span><span class=\"n\">FluctulertState</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.config", "modulename": "strela.config", "type": "module", "doc": "<p>Main configuration file.</p>\n\n<p>Configure the variables here to your needs. Since this file is under version control,\nthis is considered a default configuration, which requires to find an additional\nconfiguration file with the user's (your) specific settings. This user config file is\nexpected to be called <code>my_config.py</code> and to be placed in either of these locations:</p>\n\n<ol>\n<li>At the path the environment variable <code>STRELA_CONFIG_FILE</code> is set to.</li>\n<li>The current directory (at the time of importing the config).</li>\n<li>In ~/.strela/my_config.py</li>\n</ol>\n\n<p>A typical/minimal my_config.py might look like this:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"n\">MAIL_FROM_ADDRESS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;your email address&gt;&quot;</span>\n<span class=\"n\">MAIL_PASSWORD</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;your email application password&gt;&quot;</span>\n<span class=\"n\">SYMBOLS_FILE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/path/to/your/symbols.yaml&quot;</span>\n<span class=\"n\">ALERT_REPOSITORY_FOLDER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/path/to/your/alerts-data-folder/&quot;</span>\n</code></pre></div>\n\n<p>You could, for example, put everything in a hidden folder in your home directory with\nthe following items:</p>\n\n<ul>\n<li><code>~/.strela/</code>: Folder for strela-related files</li>\n<li><code>~/.strela/my_config.py</code>: User config file (will be found automatically)</li>\n<li><code>~/.strela/data/</code>: Folder for the alert repository</li>\n</ul>\n\n<p>Overview of the most important settings:</p>\n\n<ul>\n<li><code>SYMBOLS_FILE</code>: Path to the file containing the symbols to be monitored.</li>\n<li><code>MAIL_FROM_ADDRESS</code>: The email address to use as sender, i.e. your email address. Will\nalso be used for authentication.</li>\n<li><code>MAIL_PASSWORD</code>: The password to use for authentication. It is strongly recommended to\nuse an application password.</li>\n<li><code>ALERT_REPOSITORY_FOLDER</code>: The folder to store the alert repository in.</li>\n</ul>\n\n<p>Debugging options:</p>\n\n<ul>\n<li><code>ENABLE_ALL_DOWS</code>: If True, ignore day-of-week settings and run on all days.</li>\n<li><code>NO_MAIL</code>: If True, don't send mail and instead print alerts to stdout.</li>\n</ul>\n\n<p>Refer to the comments in this file's source code for more details.</p>\n\n<p>Use this to verify what gets set in the end:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">strela.config</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">print_current_configuation</span><span class=\"p\">()</span>\n</code></pre></div>\n"}, {"fullname": "strela.config.looks_like_strela_setting", "modulename": "strela.config", "qualname": "looks_like_strela_setting", "type": "function", "doc": "<p>Return True if <code>string</code> looks like a strela setting.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.config.print_current_configuation", "modulename": "strela.config", "qualname": "print_current_configuation", "type": "function", "doc": "<p>Print all the settings from this file (and whatever has been set/overwritten in\nthe user's config file).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "strela.mailer", "modulename": "strela.mailer", "type": "module", "doc": "<p>Simple adapter to yagmail.</p>\n"}, {"fullname": "strela.mailer.mail", "modulename": "strela.mailer", "qualname": "mail", "type": "function", "doc": "<p>Send an email. Note that the from-address is hardcoded and taken from the\nconfig.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">to_address</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">subject</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.my_runner", "modulename": "strela.my_runner", "type": "module", "doc": "<p>Orchestrate all the building blocks to create and send alerts.</p>\n\n<p>This script is customized for my requirements and environment. Use it as a blueprint to\nbuild your own runner.</p>\n\n<p>It is intended to be run from a cron job or similar service (e.g., Windows Task\nScheduler). The way this script is set up, you can simply run it once a day and it'll\nonly run the alerts that are supposed to run on a given weekday.</p>\n\n<p>If you work with a virtual environment, use a Bash script or something like this\nPowershell script to set up your virtual environment and run the script:</p>\n\n<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"nb\">cd </span><span class=\"p\">&lt;</span><span class=\"n\">project-root</span><span class=\"p\">&gt;</span>\n<span class=\"p\">.</span> <span class=\"p\">./.</span><span class=\"n\">venv</span><span class=\"p\">/</span><span class=\"n\">Scripts</span><span class=\"p\">/</span><span class=\"n\">Activate</span><span class=\"p\">.</span><span class=\"n\">ps1</span>\n<span class=\"n\">python</span> <span class=\"n\">strela</span><span class=\"p\">/</span><span class=\"n\">my_runner</span><span class=\"p\">.</span><span class=\"n\">py</span>\n</code></pre></div>\n"}, {"fullname": "strela.my_runner.MyAlertToHtmlTemplate", "modulename": "strela.my_runner", "qualname": "MyAlertToHtmlTemplate", "type": "class", "doc": "<p>Template subclass that adds strategy information to an alert. Requires symbol to\nbe of type <code>tessa.symbol.ExtendedSymbol</code>.</p>\n", "bases": "strela.templates.AlertToHtmlTemplate"}, {"fullname": "strela.my_runner.MyAlertToHtmlTemplate.apply", "modulename": "strela.my_runner", "qualname": "MyAlertToHtmlTemplate.apply", "type": "function", "doc": "<p>Extrapolate the template into a string and return it.</p>\n\n<ul>\n<li><code>symbol</code>: Symbol for which the alert is being generated.</li>\n<li><code>alert_state</code>: Current state of the alert.</li>\n<li><code>old_state</code>: Previous state of the alert.</li>\n<li><code>latest_value</code>: Latest value of the metric.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">symboltype</span><span class=\"o\">.</span><span class=\"n\">SymbolType</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.my_runner.run", "modulename": "strela.my_runner", "qualname": "run", "type": "function", "doc": "<p>Set up everything and run the alert generation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.symboltype", "modulename": "strela.symboltype", "type": "module", "doc": "<p>SymbolType class</p>\n"}, {"fullname": "strela.symboltype.SymbolType", "modulename": "strela.symboltype", "qualname": "SymbolType", "type": "class", "doc": "<p>The minimal symbol interface alerts rely on. A symbol needs at least a name and\nall the information necessary so the callbacks can do their work.</p>\n\n<p>This class is introduced so you can use your own symbol class. But you can also\nsimply use <code>tessa.symbol.Symbol</code> (or a subclass) where a <code>SymbolType</code> is expected.</p>\n", "bases": "typing.Protocol"}, {"fullname": "strela.symboltype.SymbolType.__init__", "modulename": "strela.symboltype", "qualname": "SymbolType.__init__", "type": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "strela.templates", "modulename": "strela.templates", "type": "module", "doc": "<p>Templates that turn alerts into strings.</p>\n\n<ul>\n<li>Currently, alerts are already barebone strings, and these templates rather \"embellish\"\nthem.</li>\n<li>There are no specific tests for this module bc other tests also implicitly test the\ntemplates.</li>\n</ul>\n"}, {"fullname": "strela.templates.AlertToTextTemplate", "modulename": "strela.templates", "qualname": "AlertToTextTemplate", "type": "class", "doc": "<p>Template to turn alert into text string. Also serves as the base class for other\ntemplates. (<em>Note: Should add a proper ABC for templates rather than using\nAlertToTextTemplate (FIXME).</em>)</p>\n"}, {"fullname": "strela.templates.AlertToTextTemplate.__init__", "modulename": "strela.templates", "qualname": "AlertToTextTemplate.__init__", "type": "function", "doc": "<p><code>AlertToTextTemplate</code> initializer.</p>\n\n<ul>\n<li><code>category_name</code>: Alert category, e.g. \"Crypto\".</li>\n<li><code>alert_name</code>: Alert name, e.g. \"Fluctulert\".</li>\n<li><code>metric_name</code>: Metric name, e.g. \"Price\".</li>\n<li><code>link_pattern</code>: Link pattern, will be extrapolated in <code>apply</code>, e.g.\n\"https://www.google.com/search?q={symbol.name}+stock\"</li>\n</ul>\n\n<p>All the names are informational only and have no functional purpose.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">category_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">alert_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">metric_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">link_pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "strela.templates.AlertToTextTemplate.get_title", "modulename": "strela.templates", "qualname": "AlertToTextTemplate.get_title", "type": "function", "doc": "<p>Return the title/subject of the alert.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.templates.AlertToTextTemplate.apply", "modulename": "strela.templates", "qualname": "AlertToTextTemplate.apply", "type": "function", "doc": "<p>Extrapolate the template into a string and return it.</p>\n\n<ul>\n<li><code>symbol</code>: Symbol for which the alert is being generated.</li>\n<li><code>alert_state</code>: Current state of the alert.</li>\n<li><code>old_state</code>: Previous state of the alert.</li>\n<li><code>latest_value</code>: Latest value of the metric.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">symboltype</span><span class=\"o\">.</span><span class=\"n\">SymbolType</span>,</span><span class=\"param\">\t<span class=\"n\">alert_state</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span>,</span><span class=\"param\">\t<span class=\"n\">old_state</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">latest_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.templates.AlertToHtmlTemplate", "modulename": "strela.templates", "qualname": "AlertToHtmlTemplate", "type": "class", "doc": "<p>Template subclass that generates HTML.</p>\n", "bases": "AlertToTextTemplate"}, {"fullname": "strela.templates.AlertToHtmlTemplate.apply", "modulename": "strela.templates", "qualname": "AlertToHtmlTemplate.apply", "type": "function", "doc": "<p>Extrapolate the template into a string and return it.</p>\n\n<ul>\n<li><code>symbol</code>: Symbol for which the alert is being generated.</li>\n<li><code>alert_state</code>: Current state of the alert.</li>\n<li><code>old_state</code>: Previous state of the alert.</li>\n<li><code>latest_value</code>: Latest value of the metric.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">symbol</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">symboltype</span><span class=\"o\">.</span><span class=\"n\">SymbolType</span>,</span><span class=\"param\">\t<span class=\"n\">alert_state</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span>,</span><span class=\"param\">\t<span class=\"n\">old_state</span><span class=\"p\">:</span> <span class=\"n\">strela</span><span class=\"o\">.</span><span class=\"n\">alertstates</span><span class=\"o\">.</span><span class=\"n\">alertstate</span><span class=\"o\">.</span><span class=\"n\">AlertState</span>,</span><span class=\"param\">\t<span class=\"n\">latest_value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "strela.templates.AlertToHtmlTemplate.wrap_body", "modulename": "strela.templates", "qualname": "AlertToHtmlTemplate.wrap_body", "type": "function", "doc": "<p>Wrap the alert in HTML wrapper tags.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();